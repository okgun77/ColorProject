using UnityEngine;
using UnityEngine.AI;



public class EnemyAI : MonoBehaviour
{
    // AI 설정
    [SerializeField] private float wanderSpeed = 0.1f;  // 서성일때 속도
    [SerializeField] private float fleeSpeed = 0.2f;    // 도망갈때 속도
    [SerializeField] private float chaseSpeed = 0.3f;   // 추적할 때 속도
    [SerializeField] private float runDistance = 3f;    // 도망 거리
    [SerializeField] private float chaseDistance = 3f;  // 추적 거리
    [SerializeField] private float wanderRadius = 10;   // 배회 반경


    public float WanderSpeed => wanderSpeed;
    public float FleeSpeed => fleeSpeed;
    public float ChaseSpeed => chaseSpeed;
    public float RunDistance => runDistance;
    public float ChaseDistance => chaseDistance;
    public NPCColor NpcColor => npcColor;


    private NPCColor npcColor;
    private NavMeshAgent nav;
    private Animator anim;
<<<<<<< HEAD
    private Transform playerTransform;

    public Transform PlayerTransform => playerTransform;

    private StateManager stateManager;
    private StateWander stateWander;
    private StateFlee stateFlee;
    private StateChase stateChase;
    private NPCStateIndicator stateIndicator;


=======
    private IState curState;
    // private float wanderTimer;
    
    
    // 외부 접근자 매서드
    public NavMeshAgent Nav => nav;
    public Animator Anim => anim;
    public float WanderSpeed => wanderSpeed;
    public float FleeSpeed => fleeSpeed;
    public float ChaseSpeed => chaseSpeed;
    public float RunDistance => runDistance;
    public float ChaseDistance => chaseDistance;

    public NPCColor NpcColor => npcColor;
    
>>>>>>> d73e1774dd043556c203b0b5a7fca56cff9b69f6
    
    private void Awake()
    {
        nav = GetComponent<NavMeshAgent>();
        npcColor = GetComponent<NPCColor>();
        anim = GetComponent<Animator>();
        playerTransform = GameObject.FindGameObjectWithTag("Player").transform;
        stateIndicator = GetComponentInChildren<NPCStateIndicator>();


        // 상태 객체 초기화
        stateWander = new StateWander(nav, wanderSpeed, SetAnimation, wanderRadius, stateIndicator, stateManager);
        stateFlee = new StateFlee(nav, playerTransform, runDistance, fleeSpeed, SetAnimation, stateIndicator, stateManager);
        stateChase = new StateChase(nav, playerTransform, chaseDistance, chaseSpeed, SetAnimation, stateIndicator, stateManager);

        // StateManager 초기화
        stateManager = new StateManager(this, stateWander, stateFlee, stateChase);
    }

    private void Start()
    {
        
        ChangeState(new StateWander(this));
        
        float randomStartTime = Random.Range(0.0f, 1.0f);
        anim.Play("walk", 0, randomStartTime); // "RUN" 재생 애니메이션 상태
        SetAnimation(true, false); // 기본 상태 걷는 애니메이션
<<<<<<< HEAD


        // 상태 인스턴스 생성
        // stateWander = new StateWander(nav, wanderSpeed, SetAnimation);
        // stateFlee = new StateFlee(nav, playerTransform, runDistance, fleeSpeed, SetAnimation);
        // stateChase = new StateChase(nav, playerTransform, chaseDistance, chaseSpeed, SetAnimation);

        // 초기 상태 설정
        stateManager.ChangeState(stateWander);
=======
        
        // wanderTimer = Random.Range(1f, 2f);
        // AnimRandomStart();
        
>>>>>>> d73e1774dd043556c203b0b5a7fca56cff9b69f6
    }

    private void Update()
    {
<<<<<<< HEAD
        // NPCStatusChange();

        stateManager.UpdateState();
=======
        if (curState != null)
        {
            curState.Execute();
        }
        
        // NPCStatusChange();
>>>>>>> d73e1774dd043556c203b0b5a7fca56cff9b69f6
    }

    public void ChangeState(IState _newState)
    {
        // Debug.Log($"Changing state from {curState} to {_newState}");
        if (curState != null)
        {
            curState.Exit();
        }
        curState = _newState;
        if (curState != null)
        {
            curState.Enter();
        }
    }
    
    private void AnimRandomStart()
    {
        // 애니메이션 시작 시점을 무작위로 설정
        float randomStartTime = Random.Range(0.0f, 1.0f);
        anim.Play("walk", 0, randomStartTime); // "RUN" 재생 애니메이션 상태
        SetAnimation(true, false); // 기본 상태 걷는 애니메이션
    }
<<<<<<< HEAD


    public IState GetStateFlee()
=======
    
    
    
    /*
    // 플레이어 컬러매치 상태에 따른 NPC 행동 변경
    private void NPCStatusChange()
    {
        EColorMatchStatus colorMatchStatus = GameManager.Instance.GetCurrentColorMatchStatus();

        switch (npcColor.Type)
        {
            case NPCType.NPC_COLOR:
                NPCColorStatusChange(colorMatchStatus);
                break;
            case NPCType.NPC_WATER:
                NPCWaterStatusChange(colorMatchStatus);
                break;
        }
    }
    */    
    
    /*
    private void NPCColorStatusChange(EColorMatchStatus status)
>>>>>>> d73e1774dd043556c203b0b5a7fca56cff9b69f6
    {
        return stateFlee;
    }
    */

<<<<<<< HEAD
    public IState GetStateChase()
=======
    /*
    private void NPCWaterStatusChange(EColorMatchStatus status)
>>>>>>> d73e1774dd043556c203b0b5a7fca56cff9b69f6
    {
        return stateChase;
    }
    */

<<<<<<< HEAD
=======
    /*
    private void Wander()
    {
        wanderTimer -= Time.deltaTime;

        if (wanderTimer <= 0)
        {
            Vector3 newPos = RandomNavSphere(transform.position, runDistance, -1);
            nav.speed = wanderSpeed;
            nav.SetDestination(newPos);
            wanderTimer = Random.Range(1f, 2f);
            SetAnimation(true, false); // 걷는 애니메이션 활성화
        }
    }
    */

    /*
    private void Flee()
    {
        if (IsPlayerInRange())
        {
        Vector3 directionToPlayer = transform.position - GetPlayerPosition();
        Vector3 newPos = transform.position + directionToPlayer.normalized * runDistance;
        nav.speed = fleeSpeed;
        nav.SetDestination(newPos);
        // SetAnimation(false, true); // 뛰는 애니메이션 활성화
        SetAnimation(true, false); // 걷는 애니메이션 활성화
        }
        else
        {
            Wander();
        }
    }
    */
    
    /*
    private void Chase()
    {
        if (IsPlayerInChaseRange())
        {
        Vector3 directionToPlayer = GetPlayerPosition() - transform.position;
        Vector3 newPos = transform.position + directionToPlayer.normalized * chaseDistance;
        nav.speed = chaseSpeed;
        nav.SetDestination(newPos);
        SetAnimation(true, false); // 걷는 애니메이션 활성화
        }
        else
        {
            Wander();
        }
    }
    */
>>>>>>> d73e1774dd043556c203b0b5a7fca56cff9b69f6

    public bool PlayerInRange { get { return IsPlayerInRange(); } }
    public bool PlayerInChaseRange { get { return IsPlayerInChaseRange(); } }
    public Vector3 PlayerPosition { get { return GetPlayerPosition(); } }
    
    bool IsPlayerInRange()
    {
        GameObject player = GameObject.FindGameObjectWithTag("Player");
        if (player != null)
        {
            float distance = Vector3.Distance(transform.position, player.transform.position);
            return distance <= runDistance;
        }
        return false;
    }

    public bool IsPlayerInRangeCheck()
    {
        return IsPlayerInRange();
    }

    bool IsPlayerInChaseRange()
    {
        GameObject player = GameObject.FindGameObjectWithTag("Player");
        if (player != null)
        {
            float distance = Vector3.Distance(transform.position, player.transform.position);
            return distance <= chaseDistance;
        }
        return false;
    }

    Vector3 GetPlayerPosition()
    {
        GameObject player = GameObject.FindGameObjectWithTag("Player");
        if (player != null)
        {
            return player.transform.position;
        }
        return Vector3.zero;
    }

    public Vector3 GetPlayerPositionCheck()
    {
        return GetPlayerPosition();
    }

    private void SetAnimation(bool isWalking, bool isRunning)
    {
        anim.SetBool("isWalking", isWalking);
        anim.SetBool("isRunning", isRunning);
    }
}